name: go
on: [push]
jobs:
  test-solana:
    runs-on: ubuntu-latest
    env:
      FILECOIN_FFI_COMMIT: 8b97bd8230b77bd32f4f27e4766a6d8a03b4e801
      SOLANA_FFI_COMMIT: d4c670dd402894b7e98a41bccf35d2d5066c573f
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: "1.15.5"

      - name: Configure git for Private Modules
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: git config --global url."https://roynalnaruto:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          submodules: recursive

      - name: Caching modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-aw-${{ hashFiles('**/go.sum') }}

      - name: Cache extern dependencies (FFI)
        id: cache-extern
        uses: actions/cache@v2
        env:
          cache-name: cache-externs
        with:
          path: .extern
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.FILECOIN_FFI_COMMIT }}-${{ env.SOLANA_FFI_COMMIT }}

      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Install dependency packages
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
          sudo apt-get update
          sudo apt-get install -y build-essential
          sudo apt-get install -y jq mesa-opencl-icd ocl-icd-opencl-dev pkg-config libudev-dev hwloc libhwloc-dev
          sudo apt install libgmp-dev  libssl-dev  make gcc g++
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env

      - name: Get dependencies
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source $HOME/.cargo/env
            go get -u github.com/onsi/ginkgo/ginkgo
            go get -u github.com/onsi/gomega/...
            go get -u golang.org/x/lint/golint
            go get -u github.com/loongy/covermerge
            go get -u github.com/mattn/goveralls
            go get -u github.com/xlab/c-for-go

      - name: Install dependencies (Filecoin FFI)
        if: steps.cache-extern.outputs.cache-hit != 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source $HOME/.cargo/env
          cd $GITHUB_WORKSPACE
          mkdir .extern && cd .extern
          git clone https://github.com/filecoin-project/filecoin-ffi.git
          cd filecoin-ffi
          git checkout ${{ env.FILECOIN_FFI_COMMIT }}
          make

      - name: Install dependencies (Solana FFI)
        if: steps.cache-extern.outputs.cache-hit != 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source $HOME/.cargo/env
          cd $GITHUB_WORKSPACE/.extern
          git clone https://github.com/renproject/solana-ffi.git
          cd solana-ffi
          git checkout ${{ env.SOLANA_FFI_COMMIT }}
          make clean
          make

      - name: Install dependencies (Harmony)
        run: |
          cd $GITHUB_WORKSPACE/chain/harmony
          git clone https://github.com/harmony-one/bls.git
          git clone https://github.com/harmony-one/mcl.git
          cd $GITHUB_WORKSPACE/chain/harmony/bls
          make
          cd $GITHUB_WORKSPACE
          export CGO_CFLAGS="-I$GITHUB_WORKSPACE/chain/harmony/bls/include -I$GITHUB_WORKSPACE/chain/harmony/mcl/include -I/usr/local/opt/openssl/include"
          export CGO_LDFLAGS="-L$GITHUB_WORKSPACE/chain/harmony/bls/lib -L/usr/local/opt/openssl/lib"
          export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/chain/harmony/bls/lib:$GITHUB_WORKSPACE/chain/harmony/mcl/lib:/usr/local/opt/openssl/lib
          export LIBRARY_PATH=$LD_LIBRARY_PATH
          export DYLD_FALLBACK_LIBRARY_PATH=$LD_LIBRARY_PATH
          export GO111MODULE=on

      - name: Run vetting
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source $HOME/.cargo/env
            go mod edit -replace=github.com/filecoin-project/filecoin-ffi=./.extern/filecoin-ffi
            go mod edit -replace=github.com/renproject/solana-ffi=./.extern/solana-ffi
            go vet ./...

      - name: Setup environment for Solana tests
        run: |
            sh -c "$(curl -sSfL https://release.solana.com/v1.7.0/install)"
            cd $GITHUB_WORKSPACE
            export PATH="/home/runner/.local/share/solana/install/active_release/bin:$PATH"
            echo ${{ secrets.SOLANA_KEY }} > ~/.config/solana/id.json
            docker run -d -h 0.0.0.0 -p 8899:8899 -p 8900:8900 renbot/ren-solana:latest

      - name: Sleep until the node is up
        uses: jakejarvis/wait-action@master
        with:
          time: '1m'

      - name: Check on docker containers
        run: docker ps -a

      - name: Run tests for Solana
        run: |
            export PATH="/home/runner/.local/share/solana/install/active_release/bin:$PATH"
            cd $GITHUB_WORKSPACE/chain/solana
            go test -timeout 100s

  test-filecoin:
    runs-on: ubuntu-latest
    env:
      FILECOIN_FFI_COMMIT: 8b97bd8230b77bd32f4f27e4766a6d8a03b4e801
      SOLANA_FFI_COMMIT: d4c670dd402894b7e98a41bccf35d2d5066c573f
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Configure git for Private Modules
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: git config --global url."https://roynalnaruto:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          submodules: recursive

      - name: Caching modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-aw-${{ hashFiles('**/go.sum') }}

      - name: Cache extern dependencies (FFI)
        id: cache-extern
        uses: actions/cache@v2
        env:
          cache-name: cache-externs
        with:
          path: .extern
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.FILECOIN_FFI_COMMIT }}-${{ env.SOLANA_FFI_COMMIT }}

      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Install dependency packages
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
          sudo apt-get update
          sudo apt-get install -y build-essential
          sudo apt-get install -y jq mesa-opencl-icd ocl-icd-opencl-dev pkg-config libudev-dev hwloc libhwloc-dev
          sudo apt install libgmp-dev  libssl-dev  make gcc g++
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env

      - name: Get dependencies
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source $HOME/.cargo/env
            go get -u github.com/onsi/ginkgo/ginkgo
            go get -u github.com/onsi/gomega/...
            go get -u golang.org/x/lint/golint
            go get -u github.com/loongy/covermerge
            go get -u github.com/mattn/goveralls
            go get -u github.com/xlab/c-for-go

      - name: Install dependencies (Filecoin FFI)
        if: steps.cache-extern.outputs.cache-hit != 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source $HOME/.cargo/env
          cd $GITHUB_WORKSPACE
          mkdir .extern && cd .extern
          git clone https://github.com/filecoin-project/filecoin-ffi.git
          cd filecoin-ffi
          git checkout ${{ env.FILECOIN_FFI_COMMIT }}
          make

      - name: Install dependencies (Solana FFI)
        if: steps.cache-extern.outputs.cache-hit != 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source $HOME/.cargo/env
          cd $GITHUB_WORKSPACE/.extern
          git clone https://github.com/renproject/solana-ffi.git
          cd solana-ffi
          git checkout ${{ env.SOLANA_FFI_COMMIT }}
          make clean
          make

      - name: Install dependencies (Harmony)
        run: |
          cd $GITHUB_WORKSPACE/chain/harmony
          git clone https://github.com/harmony-one/bls.git
          git clone https://github.com/harmony-one/mcl.git
          cd $GITHUB_WORKSPACE/chain/harmony/bls
          make
          cd $GITHUB_WORKSPACE
          export CGO_CFLAGS="-I$GITHUB_WORKSPACE/chain/harmony/bls/include -I$GITHUB_WORKSPACE/chain/harmony/mcl/include -I/usr/local/opt/openssl/include"
          export CGO_LDFLAGS="-L$GITHUB_WORKSPACE/chain/harmony/bls/lib -L/usr/local/opt/openssl/lib"
          export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/chain/harmony/bls/lib:$GITHUB_WORKSPACE/chain/harmony/mcl/lib:/usr/local/opt/openssl/lib
          export LIBRARY_PATH=$LD_LIBRARY_PATH
          export DYLD_FALLBACK_LIBRARY_PATH=$LD_LIBRARY_PATH
          export GO111MODULE=on

      - name: Run vetting
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source $HOME/.cargo/env
            go mod edit -replace=github.com/filecoin-project/filecoin-ffi=./.extern/filecoin-ffi
            go mod edit -replace=github.com/renproject/solana-ffi=./.extern/solana-ffi
            go vet ./...

      - name: Run linting
        run: |
            cd $GITHUB_WORKSPACE
            export PATH=$PATH:$(go env GOPATH)/bin
            go get -u golang.org/x/lint/golint
            golint $(go list ./... | grep -v filecoin-ffi)

      - name: Run multichain infrastructure
        run: |
            cd $GITHUB_WORKSPACE/infra
            source .env
            docker run -d -p 1234:1234 -h 0.0.0.0 \
              --name infra_filecoin_1 rohitnarurkar/multichain_filecoin:latest

      - name: Sleep until the nodes are up
        uses: jakejarvis/wait-action@master
        with:
          time: '10m'

      - name: Check on docker containers
        run: docker ps -a

      - name: Run tests and report test coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source ./infra/.env
            cd $GITHUB_WORKSPACE
            go test \
              -fil=true \
              -timeout 1500s

  test-zcash:
    runs-on: ubuntu-latest
    env:
      FILECOIN_FFI_COMMIT: 8b97bd8230b77bd32f4f27e4766a6d8a03b4e801
      SOLANA_FFI_COMMIT: d4c670dd402894b7e98a41bccf35d2d5066c573f
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Configure git for Private Modules
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: git config --global url."https://roynalnaruto:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          submodules: recursive

      - name: Caching modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-aw-${{ hashFiles('**/go.sum') }}

      - name: Cache extern dependencies (FFI)
        id: cache-extern
        uses: actions/cache@v2
        env:
          cache-name: cache-externs
        with:
          path: .extern
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.FILECOIN_FFI_COMMIT }}-${{ env.SOLANA_FFI_COMMIT }}

      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Install dependency packages
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
          sudo apt-get update
          sudo apt-get install -y build-essential
          sudo apt-get install -y jq mesa-opencl-icd ocl-icd-opencl-dev pkg-config libudev-dev hwloc libhwloc-dev
          sudo apt install libgmp-dev  libssl-dev  make gcc g++
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env

      - name: Get dependencies
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source $HOME/.cargo/env
            go get -u github.com/onsi/ginkgo/ginkgo
            go get -u github.com/onsi/gomega/...
            go get -u golang.org/x/lint/golint
            go get -u github.com/loongy/covermerge
            go get -u github.com/mattn/goveralls
            go get -u github.com/xlab/c-for-go

      - name: Install dependencies (Filecoin FFI)
        if: steps.cache-extern.outputs.cache-hit != 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source $HOME/.cargo/env
          cd $GITHUB_WORKSPACE
          mkdir .extern && cd .extern
          git clone https://github.com/filecoin-project/filecoin-ffi.git
          cd filecoin-ffi
          git checkout ${{ env.FILECOIN_FFI_COMMIT }}
          make

      - name: Install dependencies (Solana FFI)
        if: steps.cache-extern.outputs.cache-hit != 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source $HOME/.cargo/env
          cd $GITHUB_WORKSPACE/.extern
          git clone https://github.com/renproject/solana-ffi.git
          cd solana-ffi
          git checkout ${{ env.SOLANA_FFI_COMMIT }}
          make clean
          make

      - name: Install dependencies (Harmony)
        run: |
          cd $GITHUB_WORKSPACE/chain/harmony
          git clone https://github.com/harmony-one/bls.git
          git clone https://github.com/harmony-one/mcl.git
          cd $GITHUB_WORKSPACE/chain/harmony/bls
          make
          cd $GITHUB_WORKSPACE
          export CGO_CFLAGS="-I$GITHUB_WORKSPACE/chain/harmony/bls/include -I$GITHUB_WORKSPACE/chain/harmony/mcl/include -I/usr/local/opt/openssl/include"
          export CGO_LDFLAGS="-L$GITHUB_WORKSPACE/chain/harmony/bls/lib -L/usr/local/opt/openssl/lib"
          export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/chain/harmony/bls/lib:$GITHUB_WORKSPACE/chain/harmony/mcl/lib:/usr/local/opt/openssl/lib
          export LIBRARY_PATH=$LD_LIBRARY_PATH
          export DYLD_FALLBACK_LIBRARY_PATH=$LD_LIBRARY_PATH
          export GO111MODULE=on

      - name: Run vetting
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source $HOME/.cargo/env
            go mod edit -replace=github.com/filecoin-project/filecoin-ffi=./.extern/filecoin-ffi
            go mod edit -replace=github.com/renproject/solana-ffi=./.extern/solana-ffi
            go vet ./...

      - name: Run linting
        run: |
            cd $GITHUB_WORKSPACE
            export PATH=$PATH:$(go env GOPATH)/bin
            go get -u golang.org/x/lint/golint
            golint $(go list ./... | grep -v filecoin-ffi)

      - name: Run multichain infrastructure
        run: |
            cd $GITHUB_WORKSPACE/infra
            source .env
            docker-compose up -d --build zcash

      - name: Sleep until the nodes are up
        uses: jakejarvis/wait-action@master
        with:
          time: '1m'

      - name: Check on docker containers
        run: docker ps -a

      - name: Run tests and report test coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source ./infra/.env
            cd $GITHUB_WORKSPACE
            go test \
              -zec=true \
              -timeout 1500s

  test-terra:
    runs-on: ubuntu-latest
    env:
      FILECOIN_FFI_COMMIT: 8b97bd8230b77bd32f4f27e4766a6d8a03b4e801
      SOLANA_FFI_COMMIT: d4c670dd402894b7e98a41bccf35d2d5066c573f
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Configure git for Private Modules
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: git config --global url."https://roynalnaruto:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          submodules: recursive

      - name: Caching modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-aw-${{ hashFiles('**/go.sum') }}

      - name: Cache extern dependencies (FFI)
        id: cache-extern
        uses: actions/cache@v2
        env:
          cache-name: cache-externs
        with:
          path: .extern
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.FILECOIN_FFI_COMMIT }}-${{ env.SOLANA_FFI_COMMIT }}

      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Install dependency packages
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
          sudo apt-get update
          sudo apt-get install -y build-essential
          sudo apt-get install -y jq mesa-opencl-icd ocl-icd-opencl-dev pkg-config libudev-dev hwloc libhwloc-dev
          sudo apt install libgmp-dev  libssl-dev  make gcc g++
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env

      - name: Get dependencies
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source $HOME/.cargo/env
            go get -u github.com/onsi/ginkgo/ginkgo
            go get -u github.com/onsi/gomega/...
            go get -u golang.org/x/lint/golint
            go get -u github.com/loongy/covermerge
            go get -u github.com/mattn/goveralls
            go get -u github.com/xlab/c-for-go

      - name: Install dependencies (Filecoin FFI)
        if: steps.cache-extern.outputs.cache-hit != 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source $HOME/.cargo/env
          cd $GITHUB_WORKSPACE
          mkdir .extern && cd .extern
          git clone https://github.com/filecoin-project/filecoin-ffi.git
          cd filecoin-ffi
          git checkout ${{ env.FILECOIN_FFI_COMMIT }}
          make

      - name: Install dependencies (Solana FFI)
        if: steps.cache-extern.outputs.cache-hit != 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source $HOME/.cargo/env
          cd $GITHUB_WORKSPACE/.extern
          git clone https://github.com/renproject/solana-ffi.git
          cd solana-ffi
          git checkout ${{ env.SOLANA_FFI_COMMIT }}
          make clean
          make

      - name: Install dependencies (Harmony)
        run: |
          cd $GITHUB_WORKSPACE/chain/harmony
          git clone https://github.com/harmony-one/bls.git
          git clone https://github.com/harmony-one/mcl.git
          cd $GITHUB_WORKSPACE/chain/harmony/bls
          make
          cd $GITHUB_WORKSPACE
          export CGO_CFLAGS="-I$GITHUB_WORKSPACE/chain/harmony/bls/include -I$GITHUB_WORKSPACE/chain/harmony/mcl/include -I/usr/local/opt/openssl/include"
          export CGO_LDFLAGS="-L$GITHUB_WORKSPACE/chain/harmony/bls/lib -L/usr/local/opt/openssl/lib"
          export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/chain/harmony/bls/lib:$GITHUB_WORKSPACE/chain/harmony/mcl/lib:/usr/local/opt/openssl/lib
          export LIBRARY_PATH=$LD_LIBRARY_PATH
          export DYLD_FALLBACK_LIBRARY_PATH=$LD_LIBRARY_PATH
          export GO111MODULE=on

      - name: Run vetting
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source $HOME/.cargo/env
            go mod edit -replace=github.com/filecoin-project/filecoin-ffi=./.extern/filecoin-ffi
            go mod edit -replace=github.com/renproject/solana-ffi=./.extern/solana-ffi
            go vet ./...

      - name: Run linting
        run: |
            cd $GITHUB_WORKSPACE
            export PATH=$PATH:$(go env GOPATH)/bin
            go get -u golang.org/x/lint/golint
            golint $(go list ./... | grep -v filecoin-ffi)

      - name: Run multichain infrastructure
        run: |
            cd $GITHUB_WORKSPACE/infra
            source .env
            docker-compose up -d --build terra

      - name: Sleep until the nodes are up
        uses: jakejarvis/wait-action@master
        with:
          time: '1m'

      - name: Check on docker containers
        run: docker ps -a

      - name: Run tests and report test coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source ./infra/.env
            cd $GITHUB_WORKSPACE
            go test \
              -luna=true \
              -timeout 1500s

  test-dogecoin:
    runs-on: ubuntu-latest
    env:
      FILECOIN_FFI_COMMIT: 8b97bd8230b77bd32f4f27e4766a6d8a03b4e801
      SOLANA_FFI_COMMIT: d4c670dd402894b7e98a41bccf35d2d5066c573f
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Configure git for Private Modules
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: git config --global url."https://roynalnaruto:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          submodules: recursive

      - name: Caching modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-aw-${{ hashFiles('**/go.sum') }}

      - name: Cache extern dependencies (FFI)
        id: cache-extern
        uses: actions/cache@v2
        env:
          cache-name: cache-externs
        with:
          path: .extern
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.FILECOIN_FFI_COMMIT }}-${{ env.SOLANA_FFI_COMMIT }}

      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Install dependency packages
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
          sudo apt-get update
          sudo apt-get install -y build-essential
          sudo apt-get install -y jq mesa-opencl-icd ocl-icd-opencl-dev pkg-config libudev-dev hwloc libhwloc-dev
          sudo apt install libgmp-dev  libssl-dev  make gcc g++
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env

      - name: Get dependencies
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source $HOME/.cargo/env
            go get -u github.com/onsi/ginkgo/ginkgo
            go get -u github.com/onsi/gomega/...
            go get -u golang.org/x/lint/golint
            go get -u github.com/loongy/covermerge
            go get -u github.com/mattn/goveralls
            go get -u github.com/xlab/c-for-go

      - name: Install dependencies (Filecoin FFI)
        if: steps.cache-extern.outputs.cache-hit != 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source $HOME/.cargo/env
          cd $GITHUB_WORKSPACE
          mkdir .extern && cd .extern
          git clone https://github.com/filecoin-project/filecoin-ffi.git
          cd filecoin-ffi
          git checkout ${{ env.FILECOIN_FFI_COMMIT }}
          make

      - name: Install dependencies (Solana FFI)
        if: steps.cache-extern.outputs.cache-hit != 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source $HOME/.cargo/env
          cd $GITHUB_WORKSPACE/.extern
          git clone https://github.com/renproject/solana-ffi.git
          cd solana-ffi
          git checkout ${{ env.SOLANA_FFI_COMMIT }}
          make clean
          make

      - name: Install dependencies (Harmony)
        run: |
          cd $GITHUB_WORKSPACE/chain/harmony
          git clone https://github.com/harmony-one/bls.git
          git clone https://github.com/harmony-one/mcl.git
          cd $GITHUB_WORKSPACE/chain/harmony/bls
          make
          cd $GITHUB_WORKSPACE
          export CGO_CFLAGS="-I$GITHUB_WORKSPACE/chain/harmony/bls/include -I$GITHUB_WORKSPACE/chain/harmony/mcl/include -I/usr/local/opt/openssl/include"
          export CGO_LDFLAGS="-L$GITHUB_WORKSPACE/chain/harmony/bls/lib -L/usr/local/opt/openssl/lib"
          export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/chain/harmony/bls/lib:$GITHUB_WORKSPACE/chain/harmony/mcl/lib:/usr/local/opt/openssl/lib
          export LIBRARY_PATH=$LD_LIBRARY_PATH
          export DYLD_FALLBACK_LIBRARY_PATH=$LD_LIBRARY_PATH
          export GO111MODULE=on

      - name: Run vetting
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source $HOME/.cargo/env
            go mod edit -replace=github.com/filecoin-project/filecoin-ffi=./.extern/filecoin-ffi
            go mod edit -replace=github.com/renproject/solana-ffi=./.extern/solana-ffi
            go vet ./...

      - name: Run linting
        run: |
            cd $GITHUB_WORKSPACE
            export PATH=$PATH:$(go env GOPATH)/bin
            go get -u golang.org/x/lint/golint
            golint $(go list ./... | grep -v filecoin-ffi)

      - name: Run multichain infrastructure
        run: |
            cd $GITHUB_WORKSPACE/infra
            source .env
            docker-compose up -d --build dogecoin

      - name: Sleep until the nodes are up
        uses: jakejarvis/wait-action@master
        with:
          time: '1m'

      - name: Check on docker containers
        run: docker ps -a

      - name: Run tests and report test coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source ./infra/.env
            cd $GITHUB_WORKSPACE
            go test \
              -doge=true \
              -timeout 1500s

  test-btc-bch:
    runs-on: ubuntu-latest
    env:
      FILECOIN_FFI_COMMIT: 8b97bd8230b77bd32f4f27e4766a6d8a03b4e801
      SOLANA_FFI_COMMIT: d4c670dd402894b7e98a41bccf35d2d5066c573f
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Configure git for Private Modules
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: git config --global url."https://roynalnaruto:${TOKEN}@github.com".insteadOf "https://github.com"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          submodules: recursive

      - name: Caching modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-aw-${{ hashFiles('**/go.sum') }}

      - name: Cache extern dependencies (FFI)
        id: cache-extern
        uses: actions/cache@v2
        env:
          cache-name: cache-externs
        with:
          path: .extern
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.FILECOIN_FFI_COMMIT }}-${{ env.SOLANA_FFI_COMMIT }}

      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Install dependency packages
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
          sudo apt-get update
          sudo apt-get install -y build-essential
          sudo apt-get install -y jq mesa-opencl-icd ocl-icd-opencl-dev pkg-config libudev-dev hwloc libhwloc-dev
          sudo apt install libgmp-dev  libssl-dev  make gcc g++
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env

      - name: Get dependencies
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source $HOME/.cargo/env
            go get -u github.com/onsi/ginkgo/ginkgo
            go get -u github.com/onsi/gomega/...
            go get -u golang.org/x/lint/golint
            go get -u github.com/loongy/covermerge
            go get -u github.com/mattn/goveralls
            go get -u github.com/xlab/c-for-go

      - name: Install dependencies (Filecoin FFI)
        if: steps.cache-extern.outputs.cache-hit != 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source $HOME/.cargo/env
          cd $GITHUB_WORKSPACE
          mkdir .extern && cd .extern
          git clone https://github.com/filecoin-project/filecoin-ffi.git
          cd filecoin-ffi
          git checkout ${{ env.FILECOIN_FFI_COMMIT }}
          make

      - name: Install dependencies (Solana FFI)
        if: steps.cache-extern.outputs.cache-hit != 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source $HOME/.cargo/env
          cd $GITHUB_WORKSPACE/.extern
          git clone https://github.com/renproject/solana-ffi.git
          cd solana-ffi
          git checkout ${{ env.SOLANA_FFI_COMMIT }}
          make clean
          make

      - name: Install dependencies (Harmony)
        run: |
          cd $GITHUB_WORKSPACE/chain/harmony
          git clone https://github.com/harmony-one/bls.git
          git clone https://github.com/harmony-one/mcl.git
          cd $GITHUB_WORKSPACE/chain/harmony/bls
          make
          cd $GITHUB_WORKSPACE
          export CGO_CFLAGS="-I$GITHUB_WORKSPACE/chain/harmony/bls/include -I$GITHUB_WORKSPACE/chain/harmony/mcl/include -I/usr/local/opt/openssl/include"
          export CGO_LDFLAGS="-L$GITHUB_WORKSPACE/chain/harmony/bls/lib -L/usr/local/opt/openssl/lib"
          export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/chain/harmony/bls/lib:$GITHUB_WORKSPACE/chain/harmony/mcl/lib:/usr/local/opt/openssl/lib
          export LIBRARY_PATH=$LD_LIBRARY_PATH
          export DYLD_FALLBACK_LIBRARY_PATH=$LD_LIBRARY_PATH
          export GO111MODULE=on

      - name: Run vetting
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source $HOME/.cargo/env
            go mod edit -replace=github.com/filecoin-project/filecoin-ffi=./.extern/filecoin-ffi
            go mod edit -replace=github.com/renproject/solana-ffi=./.extern/solana-ffi
            go vet ./...

      - name: Run linting
        run: |
            cd $GITHUB_WORKSPACE
            export PATH=$PATH:$(go env GOPATH)/bin
            go get -u golang.org/x/lint/golint
            golint $(go list ./... | grep -v filecoin-ffi)

      - name: Run multichain infrastructure
        run: |
            cd $GITHUB_WORKSPACE/infra
            source .env
            docker-compose up -d --build \
              bitcoin \
              bitcoincash

      - name: Sleep until the nodes are up
        uses: jakejarvis/wait-action@master
        with:
          time: '1m'

      - name: Check on docker containers
        run: docker ps -a

      - name: Run tests and report test coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            source ./infra/.env
            cd $GITHUB_WORKSPACE
            go test \
              -btc=true \
              -bch=true \
              -timeout 1500s

  test-harmony:
    runs-on: ubuntu-latest
    env:
      FILECOIN_FFI_COMMIT: a62d00da59d1b0fb35f3a4ae854efa9441af892d
      SOLANA_FFI_COMMIT: f6521b8a1af44f4d468bc8e7e67ba3766a5602ef
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
        with:
          submodules: recursive

      - name: Caching modules
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-aw-${{ hashFiles('**/go.sum') }}

      - name: Cache extern dependencies (FFI)
        id: cache-extern
        uses: actions/cache@v2
        env:
          cache-name: cache-externs
        with:
          path: .extern
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.FILECOIN_FFI_COMMIT }}-${{ env.SOLANA_FFI_COMMIT }}

      # Remove apt repos that are known to break from time to time
      # See https://github.com/actions/virtual-environments/issues/323
      - name: Install dependency packages
        run: |
          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
          sudo apt-get update
          sudo apt-get install -y build-essential
          sudo apt-get install -y jq mesa-opencl-icd ocl-icd-opencl-dev pkg-config libudev-dev
          sudo apt install libgmp-dev  libssl-dev  make gcc g++
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env

      - name: Get dependencies
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source $HOME/.cargo/env
          go get -u github.com/onsi/ginkgo/ginkgo
          go get -u github.com/onsi/gomega/...
          go get -u golang.org/x/lint/golint
          go get -u github.com/loongy/covermerge
          go get -u github.com/mattn/goveralls
          go get -u github.com/xlab/c-for-go

      - name: Install dependencies (Filecoin FFI)
        if: steps.cache-extern.outputs.cache-hit != 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source $HOME/.cargo/env
          cd $GITHUB_WORKSPACE
          mkdir .extern && cd .extern
          git clone https://github.com/filecoin-project/filecoin-ffi.git
          cd filecoin-ffi
          git checkout ${{ env.FILECOIN_FFI_COMMIT }}
          make

      - name: Install dependencies (Solana FFI)
        if: steps.cache-extern.outputs.cache-hit != 'true'
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source $HOME/.cargo/env
          cd $GITHUB_WORKSPACE/.extern
          git clone https://github.com/renproject/solana-ffi.git
          cd solana-ffi
          git checkout ${{ env.SOLANA_FFI_COMMIT }}
          make clean
          make

      - name: Install dependencies (Harmony)
        run: |
          cd $GITHUB_WORKSPACE/chain/harmony
          git clone https://github.com/harmony-one/bls.git
          git clone https://github.com/harmony-one/mcl.git
          cd $GITHUB_WORKSPACE/chain/harmony/bls
          make
          cd $GITHUB_WORKSPACE
          export CGO_CFLAGS="-I$GITHUB_WORKSPACE/chain/harmony/bls/include -I$GITHUB_WORKSPACE/chain/harmony/mcl/include -I/usr/local/opt/openssl/include"
          export CGO_LDFLAGS="-L$GITHUB_WORKSPACE/chain/harmony/bls/lib -L/usr/local/opt/openssl/lib"
          export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/chain/harmony/bls/lib:$GITHUB_WORKSPACE/chain/harmony/mcl/lib:/usr/local/opt/openssl/lib
          export LIBRARY_PATH=$LD_LIBRARY_PATH
          export DYLD_FALLBACK_LIBRARY_PATH=$LD_LIBRARY_PATH
          export GO111MODULE=on

      - name: Run vetting
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source $HOME/.cargo/env
          go mod edit -replace=github.com/filecoin-project/filecoin-ffi=./.extern/filecoin-ffi
          go mod edit -replace=github.com/renproject/solana-ffi=./.extern/solana-ffi
          go vet ./...

      - name: Run linting
        run: |
          cd $GITHUB_WORKSPACE
          export PATH=$PATH:$(go env GOPATH)/bin
          go get -u golang.org/x/lint/golint
          golint $(go list ./... | grep -v filecoin-ffi)

      - name: Run multichain infrastructure
        run: |
          cd $GITHUB_WORKSPACE/infra
          source .env
          docker-compose up -d --build \
            harmony

      - name: Sleep until the nodes are up
        uses: jakejarvis/wait-action@master
        with:
          time: '1m'

      - name: Check on docker containers
        run: docker ps -a

      - name: Run tests and report test coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          source ./infra/.env
          cd $GITHUB_WORKSPACE
          go test \
            -one=true \
            -timeout 1500s
